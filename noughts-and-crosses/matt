#!/usr/bin/env ruby
board_layout = ARGV[0]
my_player = ARGV[1]

class Board
  def initialize(board_layout, my_player)
    @layout, @me = board_layout, my_player
    @opponent = 'x'
    @opponent = 'o' if @me == 'x'
  end
  
  def next_move
    return coords(block_opponent) if opponent_about_to_win?
    
    return dumb_corner_move if board_empty?
    
    return winning_move if winning_move
    
    return next_empty_cell
  end
  
  def cells
    @layout.split('')
  end
  
  def winning_move
    # middle
    return coords(4) if cells[0] == @me and cells[8] == @me
    return coords(4) if cells[2] == @me and cells[6] == @me

    return coords(1) if cells[0] == @me and cells[2] == @me
    return coords(3) if cells[0] == @me and cells[6] == @me
    return coords(5) if cells[2] == @me and cells[8] == @me
    return coords(7) if cells[6] == @me and cells[8] == @me
    nil
  end
  
  def next_empty_cell
    cells.each_with_index do |cell, index|
      empty = (cell == '.')
      return coords(index) if empty
    end
  end
  
  def dumb_corner_move
    cells.each_with_index do |cell, index|
      in_corner = [0, 2, 6, 8].include?(index)
      empty = (cell == '.')
      return coords(index) if in_corner and empty
    end
  end
  
  def board_empty?
    @layout == '.........'
  end
  
  def coords(index)
    x = (index) % 3
    y = (index) / 3
    "(#{y},#{x})"
  end
  
  def opponent_about_to_win?
    !block_opponent.nil?
  end
  
  def opponent
    @opponent
  end
  
  def block_opponent
    if cells[0] == opponent 
      return 0 if cells[2] == opponent
      return 2 if cells[6] == opponent
    end
    nil
  end
end

board = Board.new(board_layout, my_player)
puts board.next_move